import b, { useState, useEffect, useRef, useCallback, useLayoutEffect, useSyncExternalStore } from 'react';
import ie from 'use-keyboard-shortcut';
import p from 'js-cookie';
import { Awaiting, Success, Failure } from '@tactics/js-monad';

function q(e,o){let[t,r]=useState(e);return useEffect(()=>{let s=setTimeout(()=>{r(e);},o);return ()=>{clearTimeout(s);}},[e,o]),t}function E(e,o=500){let[t,r]=useState(e),s=useRef(null);return useEffect(()=>{let n=Date.now();if(s.current&&n>=s.current+o)s.current=n,r(e);else {let u=window.setTimeout(()=>{s.current=n,r(e);},o);return ()=>window.clearTimeout(u)}},[e,o]),t}function a(e,o,t=window){let r=useRef(o);useEffect(()=>{r.current=o;},[o]),useEffect(()=>{if(!t)return;let s=n=>r.current(n);return t.addEventListener(e,s),()=>{t.removeEventListener(e,s);}},[e,t]);}function ne(){let[e,o]=useState({width:0,height:0}),t=useCallback(()=>{o({width:window.innerWidth||0,height:window.innerHeight||0});},[]);return useEffect(()=>{t();},[t]),a("resize",()=>t,window),a("orientationchange",()=>t,window),e}function ue(e,o,t){useEffect(()=>{let{flushHeldKeys:r}=ie(e,o,t);r();},[e,o,t]);}function ce(){let[e,o]=b.useState({width:0,height:0}),t=b.useRef(null);return [b.useCallback(s=>{if(t.current&&(t.current.disconnect(),t.current=null),s.nodeType===Node.ELEMENT_NODE){let n=new ResizeObserver(([u])=>{if(u&&u.borderBoxSize){let{inlineSize:c,blockSize:l}=u.borderBoxSize[0];o({width:c,height:l});}});n.observe(s),t.current=n;}},[]),e]}function B(e){return "clientX"in e}function G(e){return "touches"in e}function ae(e,o={}){let{threshold:t=400,onStart:r,onFinish:s,onCancel:n}=o,u=b.useRef(!1),c=b.useRef(!1),l=b.useRef();return b.useMemo(()=>{if(typeof e!="function")return {};let f=d=>{!B(d)&&!G(d)||(r&&r(d),c.current=!0,l.current=window.setTimeout(()=>{e(d),u.current=!0;},t));},i=d=>{!B(d)&&!G(d)||(u.current?s&&s(d):c.current&&n&&n(d),u.current=!1,c.current=!1,l.current&&window.clearTimeout(l.current));};return {...{onMouseDown:f,onMouseUp:i,onMouseLeave:i},...{onTouchStart:f,onTouchEnd:i}}},[e,t,n,s,r])}var le=e=>(document.addEventListener("visibilitychange",e),()=>{document.removeEventListener("visibilitychange",e);});function de(){useLayoutEffect(()=>{let e=window.getComputedStyle(document.body).overflow;return document.body.style.overflow="hidden",()=>{document.body.style.overflow=e;}},[]);}function pe(e){let[o,t]=useState(!1);return e.current&&(a("mouseover",()=>t(!0),e.current),a("mouseout",()=>t(!1),e.current)),o}var T=class{get length(){return Object.keys(p.get()).length}clear(){let o=p.get();for(let t in o)p.remove(t);}getItem(o){let t=p.get(o);return t!==void 0?t:null}key(o){let t=Object.keys(p.get());return t.length>o?t[o]:null}removeItem(o){p.remove(o);}setItem(o,t){p.set(o,t);}toString(){return JSON.stringify(p.get(),null,2)}};function ge(e){b.useEffect(()=>{document.title=e;},[e]);}function R(e){useEffect(()=>{let t=document.querySelector('link[rel="apple-touch-icon"]');t||(t=document.createElement("link"),t.rel="apple-touch-icon",document.head.appendChild(t)),t.href=e;},[e]);}function L(e){useEffect(()=>{let t=document.querySelector('link[rel="icon"]:not([type="image/svg+xml"])');t||(t=document.createElement("link"),t.rel="icon",document.head.appendChild(t)),t.href=e;},[e]);}function M(e){useEffect(()=>{let t=document.querySelector('link[rel="icon"][type="image/svg+xml"]');t||(t=document.createElement("link"),t.type="image/svg+xml",t.rel="icon",document.head.appendChild(t)),e instanceof SVGElement?t.href="data:image/svg+xml;utf8,"+e:t.href=e;},[e]);}function ye(e,o,t){useEffect(()=>{M(e),L(o),R(t);},[e,o,t]);}function Re(){let[e,o]=b.useState(new Awaiting),t=b.useCallback(r=>navigator.clipboard&&navigator.clipboard.writeText(r).then(()=>{o(Success.of(r));}).catch(s=>{o(Failure.dueTo(s.message,s.name));}),[]);return [e,t]}function Ie(e={}){let[o,t]=b.useState(new Awaiting),r=b.useRef(e);return b.useEffect(()=>{let s=({coords:i,timestamp:g})=>{t(Success.of({timestamp:g,latitude:i.latitude,longitude:i.longitude,altitude:i.altitude,accuracy:i.accuracy,altitudeAccuracy:i.altitudeAccuracy,heading:i.heading,speed:i.speed}));},n=i=>{t(Failure.dueTo(i.message,String(i.code)));},{enableHighAccuracy:u,timeout:c,maximumAge:l}=r.current;navigator.geolocation.getCurrentPosition(s,n,{enableHighAccuracy:u,timeout:c,maximumAge:l});let f=navigator.geolocation.watchPosition(s,n,{enableHighAccuracy:u,timeout:c,maximumAge:l});return ()=>{navigator.geolocation.clearWatch(f);}},[]),o}function Ce(e=1e3*60){let[o,t]=b.useState(!1);return b.useEffect(()=>{let r,s=()=>{t(!0);},n=E(c=>{t(!1),window.clearTimeout(r),r=window.setTimeout(s,e);},500),u=c=>{document.hidden||n(c);};r=window.setTimeout(s,e),a("mousemove",n),a("mousedown",n),a("resize",n),a("keydown",n),a("touchstart",n),a("wheel",n),a("visibilitychange",u);},[e]),o}function m(e){let o=b.useCallback(s=>{let n=window.matchMedia(e);return n.addEventListener("change",s),()=>{n.removeEventListener("change",s);}},[e]),t=()=>window.matchMedia(e).matches,r=()=>{throw new Error("useMediaQuery is a client-only hook")};return b.useSyncExternalStore(o,t,r)}function I(){return m("(prefers-color-scheme: dark)")}function C(){return m("(prefers-contrast: more)")}function O(){return m("(prefers-contrast: less)")}function P(){return m("(prefers-reduced-motion: reduce)")}function F(){return m("(prefers-reduced-transparency: reduce)")}function Pe(e,o={}){let[t,r]=b.useState(new Awaiting),s=b.useRef(o);return b.useEffect(()=>{let n=document.querySelector(`script[src="${e}"]`);if(n)switch(n.getAttribute("data-status")){case"ready":r(Success.of("ready"));break;case"error":r(Failure.dueTo(`Failed to load script: ${e}`,"error"));break;default:r(Success.of("external"));break}else if(n=document.createElement("script"),n){n.src=e,n.async=!0,document.body.appendChild(n);let u=()=>{n?.setAttribute("data-status","ready"),r(Success.of(!0)),l();},c=()=>{n?.setAttribute("data-status","error"),r(Failure.dueTo(`Failed to load script: ${e}`,"error")),l();},l=()=>{n?.removeEventListener("load",u),n?.removeEventListener("error",c);};n.addEventListener("load",u),n.addEventListener("error",c);let f=s.current.removeOnUnmount;return ()=>{f===!0&&(n?.remove(),l());}}else r(Failure.dueTo(`Failed to add script tag for : ${e}`,"error"));},[e]),t}function j(e,o,t,r){window.dispatchEvent(new StorageEvent("storage",{key:e,newValue:o,oldValue:t,storageArea:r}));}var K=()=>{throw Error("this is a client-only hook")};function y(e,o){let t=o.getItem(e);if(!t)return Failure.dueTo(`${e} is not available in ${o} storage`,"NOT_AVAILABLE");try{let r=JSON.parse(t);return Success.of(r)}catch{return Failure.dueTo(`${e} has invalid format in storage`,"INVALID_FORMAT")}}function k(e,o,t){let r=y(e,t);try{let s=JSON.stringify(o);return t.setItem(e,s),j(e,o,r instanceof Failure?null:r.unwrap(),t),Success.of(o)}catch{return Failure.dueTo(`${o} has invalid format to put into storage`,"INVALID_FORMAT")}}function z(e,o){let t=y(e,o);if(t instanceof Failure)return o.removeItem(e),Success.of(e);try{return o.removeItem(e),j(e,null,t.unwrap(),o),Success.of(e)}catch{return Failure.dueTo(`${e} could not be removed from storage`,"INVALID_FORMAT")}}function He(e,o){return JSON.stringify(e)===JSON.stringify(o)}function ke(e,o,t){let r=useCallback(()=>y(e,t),[e,t]),s=useRef(r()),n=useCallback(i=>(window.addEventListener("storage",i),()=>window.removeEventListener("storage",i)),[]),u=useCallback(()=>{let i=r();return (s.current===null||!He(s.current,i))&&(s.current=i),s.current},[r]),c=useSyncExternalStore(n,u,K),l=useCallback(i=>{let g=i;g===null?z(e,t):k(e,g,t);},[e,t]),f=useCallback(()=>{z(e,t);},[e,t]);return useEffect(()=>{k(e,o,t);},[e,o,t]),[c,l,f]}function ze(){let[e,o]=b.useState({x:0,y:0}),t=b.useCallback((...r)=>{if(typeof r[0]=="object")window.scrollTo(r[0]);else if(typeof r[0]=="number"&&typeof r[1]=="number")window.scrollTo(r[0],r[1]);else throw new Error("Invalid arguments passed to scrollTo. See here for more info: https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo")},[]);return b.useLayoutEffect(()=>{let r=()=>{o({x:window.scrollX,y:window.scrollY});};return r(),window.addEventListener("scroll",r),()=>{window.removeEventListener("scroll",r);}},[]),[e,t]}function Be(e,o="0px"){let[t,r]=useState(!1);return useEffect(()=>{if(e.current==null)return;let s=new IntersectionObserver(([n])=>r(n.isIntersecting),{rootMargin:o});return s.observe(e.current),()=>{e.current!=null&&s.unobserve(e.current);}},[e.current,o]),t}var v=class{constructor(o,t,r,s,n){this.reducedMotion=o,this.highContrast=t,this.lowContrast=r,this.reducedTransparency=s,this.darkMode=n;}prefersDarkMode(){return this.darkMode}prefersHighContrast(){return this.highContrast}prefersLowContrast(){return this.lowContrast}prefersReducedMotion(){return this.reducedMotion}prefersTransparency(){return this.reducedTransparency}};var Ge=()=>{let e=P(),o=C(),t=O(),r=F(),s=I();return new v(e,o,t,r,s)};

export { v as BrowserAccessibilityPreferences, T as CookieStorage, R as useAppleTouchFavicon, Ge as useBrowserAccessibilityPreferences, Re as useCopyToClipboard, q as useDebounce, ge as useDocumentTitle, a as useEventListener, ye as useFavicon, Ie as useGeolocation, pe as useHover, L as useIcoFavicon, Ce as useIdle, ue as useKeyboardShortcuts, de as useLockBodyScroll, ae as useLongPress, ce as useMeasure, m as useMediaQuery, Be as useOnScreen, I as usePrefersDarkMode, C as usePrefersHighContast, O as usePrefersLowContrast, P as usePrefersReducedMotion, F as usePrefersReducedTransparancy, Pe as useScript, ke as useStorage, M as useSvgFavicon, E as useThrottle, ne as useViewportSize, le as useVisibilityChange, ze as useWindowScroll };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=data:application/json;base64,