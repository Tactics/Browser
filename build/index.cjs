'use strict';

var S = require('react');
var ue = require('use-keyboard-shortcut');
var f = require('js-cookie');
var jsMonad = require('@tactics/js-monad');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var S__default = /*#__PURE__*/_interopDefault(S);
var ue__default = /*#__PURE__*/_interopDefault(ue);
var f__default = /*#__PURE__*/_interopDefault(f);

function X(e,o){let[t,r]=S.useState(e);return S.useEffect(()=>{let s=setTimeout(()=>{r(e);},o);return ()=>{clearTimeout(s);}},[e,o]),t}function y(e,o=500){let[t,r]=S.useState(e),s=S.useRef(null);return S.useEffect(()=>{let n=Date.now();if(s.current&&n>=s.current+o)s.current=n,r(e);else {let i=window.setTimeout(()=>{s.current=n,r(e);},o);return ()=>window.clearTimeout(i)}},[e,o]),t}function a(e,o,t=window){let r=S.useRef(o);S.useEffect(()=>{r.current=o;},[o]),S.useEffect(()=>{if(!t)return;let s=n=>r.current(n);return t.addEventListener(e,s),()=>{t.removeEventListener(e,s);}},[e,t]);}function se(){let[e,o]=S.useState({width:0,height:0}),t=S.useCallback(()=>{o({width:window.innerWidth||0,height:window.innerHeight||0});},[]);return S.useEffect(()=>{t();},[t]),a("resize",()=>t,window),a("orientationchange",()=>t,window),e}function ce(e,o,t){S.useEffect(()=>{let{flushHeldKeys:r}=ue__default.default(e,o,t);r();},[e,o,t]);}function ae(){let[e,o]=S__default.default.useState({width:0,height:0}),t=S__default.default.useRef(null);return [S__default.default.useCallback(s=>{if(t.current&&(t.current.disconnect(),t.current=null),s.nodeType===Node.ELEMENT_NODE){let n=new ResizeObserver(([i])=>{if(i&&i.borderBoxSize){let{inlineSize:u,blockSize:c}=i.borderBoxSize[0];o({width:u,height:c});}});n.observe(s),t.current=n;}},[]),e]}function B(e){return "clientX"in e}function G(e){return "touches"in e}function le(e,o={}){let{threshold:t=400,onStart:r,onFinish:s,onCancel:n}=o,i=S__default.default.useRef(!1),u=S__default.default.useRef(!1),c=S__default.default.useRef();return S__default.default.useMemo(()=>{if(typeof e!="function")return {};let p=d=>{!B(d)&&!G(d)||(r&&r(d),u.current=!0,c.current=window.setTimeout(()=>{e(d),i.current=!0;},t));},l=d=>{!B(d)&&!G(d)||(i.current?s&&s(d):u.current&&n&&n(d),i.current=!1,u.current=!1,c.current&&window.clearTimeout(c.current));};return {...{onMouseDown:p,onMouseUp:l,onMouseLeave:l},...{onTouchStart:p,onTouchEnd:l}}},[e,t,n,s,r])}var me=e=>(document.addEventListener("visibilitychange",e),()=>{document.removeEventListener("visibilitychange",e);});function fe(){S.useLayoutEffect(()=>{let e=window.getComputedStyle(document.body).overflow;return document.body.style.overflow="hidden",()=>{document.body.style.overflow=e;}},[]);}function he(e){let[o,t]=S.useState(!1);return e.current&&(a("mouseover",()=>t(!0),e.current),a("mouseout",()=>t(!1),e.current)),o}var x=class{get length(){return Object.keys(f__default.default.get()).length}clear(){let o=f__default.default.get();for(let t in o)f__default.default.remove(t);}getItem(o){let t=f__default.default.get(o);return t!==void 0?t:null}key(o){let t=Object.keys(f__default.default.get());return t.length>o?t[o]:null}removeItem(o){f__default.default.remove(o);}setItem(o,t){f__default.default.set(o,t);}toString(){return JSON.stringify(f__default.default.get(),null,2)}};function Se(e){S__default.default.useEffect(()=>{document.title=e;},[e]);}function T(e){S.useEffect(()=>{let t=document.querySelector('link[rel="apple-touch-icon"]');t||(t=document.createElement("link"),t.rel="apple-touch-icon",document.head.appendChild(t)),t.href=e;},[e]);}function R(e){S.useEffect(()=>{let t=document.querySelector('link[rel="icon"]:not([type="image/svg+xml"])');t||(t=document.createElement("link"),t.rel="icon",document.head.appendChild(t)),t.href=e;},[e]);}function L(e){S.useEffect(()=>{let t=document.querySelector('link[rel="icon"][type="image/svg+xml"]');t||(t=document.createElement("link"),t.type="image/svg+xml",t.rel="icon",document.head.appendChild(t)),e instanceof SVGElement?t.href="data:image/svg+xml;utf8,"+e:t.href=e;},[e]);}function Ee(e,o,t){S.useEffect(()=>{L(e),R(o),T(t);},[e,o,t]);}function Le(){let[e,o]=S__default.default.useState(new jsMonad.Awaiting),t=S__default.default.useCallback(r=>navigator.clipboard&&navigator.clipboard.writeText(r).then(()=>{o(jsMonad.Success.of(r));}).catch(s=>{o(jsMonad.Failure.dueTo(s.message,s.name));}),[]);return [e,t]}function Ce(e={}){let[o,t]=S__default.default.useState(new jsMonad.Awaiting),r=S__default.default.useRef(e);return S__default.default.useEffect(()=>{let s=({coords:l,timestamp:Q})=>{t(jsMonad.Success.of({timestamp:Q,latitude:l.latitude,longitude:l.longitude,altitude:l.altitude,accuracy:l.accuracy,altitudeAccuracy:l.altitudeAccuracy,heading:l.heading,speed:l.speed}));},n=l=>{t(jsMonad.Failure.dueTo(l.message,String(l.code)));},{enableHighAccuracy:i,timeout:u,maximumAge:c}=r.current;navigator.geolocation.getCurrentPosition(s,n,{enableHighAccuracy:i,timeout:u,maximumAge:c});let p=navigator.geolocation.watchPosition(s,n,{enableHighAccuracy:i,timeout:u,maximumAge:c});return ()=>{navigator.geolocation.clearWatch(p);}},[]),o}function Oe(e=1e3*60){let[o,t]=S__default.default.useState(!1);return S__default.default.useEffect(()=>{let r,s=()=>{t(!0);},n=y(u=>{t(!1),window.clearTimeout(r),r=window.setTimeout(s,e);},500),i=u=>{document.hidden||n(u);};r=window.setTimeout(s,e),a("mousemove",n),a("mousedown",n),a("resize",n),a("keydown",n),a("touchstart",n),a("wheel",n),a("visibilitychange",i);},[e]),o}function m(e){let o=S__default.default.useCallback(s=>{let n=window.matchMedia(e);return n.addEventListener("change",s),()=>{n.removeEventListener("change",s);}},[e]),t=()=>window.matchMedia(e).matches,r=()=>{throw new Error("useMediaQuery is a client-only hook")};return S__default.default.useSyncExternalStore(o,t,r)}function A(){return m("(prefers-color-scheme: dark)")}function I(){return m("(prefers-contrast: more)")}function C(){return m("(prefers-contrast: less)")}function O(){return m("(prefers-reduced-motion: reduce)")}function P(){return m("(prefers-reduced-transparency: reduce)")}function Fe(e,o={}){let[t,r]=S__default.default.useState(new jsMonad.Awaiting),s=S__default.default.useRef(o);return S__default.default.useEffect(()=>{let n=document.querySelector(`script[src="${e}"]`);if(n)switch(n.getAttribute("data-status")){case"ready":r(jsMonad.Success.of("ready"));break;case"error":r(jsMonad.Failure.dueTo(`Failed to load script: ${e}`,"error"));break;default:r(jsMonad.Success.of("external"));break}else if(n=document.createElement("script"),n){n.src=e,n.async=!0,document.body.appendChild(n);let i=()=>{n?.setAttribute("data-status","ready"),r(jsMonad.Success.of(!0)),c();},u=()=>{n?.setAttribute("data-status","error"),r(jsMonad.Failure.dueTo(`Failed to load script: ${e}`,"error")),c();},c=()=>{n?.removeEventListener("load",i),n?.removeEventListener("error",u);};n.addEventListener("load",i),n.addEventListener("error",u);let p=s.current.removeOnUnmount;return ()=>{p===!0&&(n?.remove(),c());}}else r(jsMonad.Failure.dueTo(`Failed to add script tag for : ${e}`,"error"));},[e]),t}function j(e,o,t,r){window.dispatchEvent(new StorageEvent("storage",{key:e,newValue:o,oldValue:t,storageArea:r}));}var K=e=>(window.addEventListener("storage",e),()=>window.removeEventListener("storage",e)),U=()=>{throw Error("this is a client-only hook")};function v(e,o){let t=o.getItem(e);if(!t)return jsMonad.Failure.dueTo(`${e} is not available in ${o} storage`,"NOT_AVAILABLE");try{let r=JSON.parse(t);return jsMonad.Success.of(r)}catch{return jsMonad.Failure.dueTo(`${e} has invalid format in storage`,"INVALID_FORMAT")}}function k(e,o,t){let r=v(e,t);try{let s=JSON.stringify(o);return t.setItem(e,s),j(e,o,r instanceof jsMonad.Failure?null:r.unwrap(),t),jsMonad.Success.of(o)}catch{return jsMonad.Failure.dueTo(`${o} has invalid format to put into storage`,"INVALID_FORMAT")}}function H(e,o){let t=v(e,o);if(t instanceof jsMonad.Failure)return o.removeItem(e),jsMonad.Success.of(e);try{return o.removeItem(e),j(e,null,t.unwrap(),o),jsMonad.Success.of(e)}catch{return jsMonad.Failure.dueTo(`${e} could not be removed from storage`,"INVALID_FORMAT")}}function Ve(e,o,t){let r=()=>v(e,t),s=S__default.default.useSyncExternalStore(K,r,U),n=S__default.default.useCallback(u=>{let c=u;c===null?H(e,t):k(e,c,t);},[e,s]),i=S__default.default.useCallback(()=>{H(e,t);},[e,s]);return S__default.default.useEffect(()=>{k(e,o,t);},[e,o]),[s,n,i]}function De(){let[e,o]=S__default.default.useState({x:0,y:0}),t=S__default.default.useCallback((...r)=>{if(typeof r[0]=="object")window.scrollTo(r[0]);else if(typeof r[0]=="number"&&typeof r[1]=="number")window.scrollTo(r[0],r[1]);else throw new Error("Invalid arguments passed to scrollTo. See here for more info: https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo")},[]);return S__default.default.useLayoutEffect(()=>{let r=()=>{o({x:window.scrollX,y:window.scrollY});};return r(),window.addEventListener("scroll",r),()=>{window.removeEventListener("scroll",r);}},[]),[e,t]}function ze(e,o="0px"){let[t,r]=S.useState(!1);return S.useEffect(()=>{if(e.current==null)return;let s=new IntersectionObserver(([n])=>r(n.isIntersecting),{rootMargin:o});return s.observe(e.current),()=>{e.current!=null&&s.unobserve(e.current);}},[e.current,o]),t}var g=class{constructor(o,t,r,s,n){this.reducedMotion=o,this.highContrast=t,this.lowContrast=r,this.reducedTransparency=s,this.darkMode=n;}prefersDarkMode(){return this.darkMode}prefersHighContrast(){return this.highContrast}prefersLowContrast(){return this.lowContrast}prefersReducedMotion(){return this.reducedMotion}prefersTransparency(){return this.reducedTransparency}};var Qe=()=>{let e=O(),o=I(),t=C(),r=P(),s=A();return new g(e,o,t,r,s)};

exports.BrowserAccessibilityPreferences = g;
exports.CookieStorage = x;
exports.useAppleTouchFavicon = T;
exports.useBrowserAccessibilityPreferences = Qe;
exports.useCopyToClipboard = Le;
exports.useDebounce = X;
exports.useDocumentTitle = Se;
exports.useEventListener = a;
exports.useFavicon = Ee;
exports.useGeolocation = Ce;
exports.useHover = he;
exports.useIcoFavicon = R;
exports.useIdle = Oe;
exports.useKeyboardShortcuts = ce;
exports.useLockBodyScroll = fe;
exports.useLongPress = le;
exports.useMeasure = ae;
exports.useMediaQuery = m;
exports.useOnScreen = ze;
exports.usePrefersDarkMode = A;
exports.usePrefersHighContast = I;
exports.usePrefersLowContrast = C;
exports.usePrefersReducedMotion = O;
exports.usePrefersReducedTransparancy = P;
exports.useScript = Fe;
exports.useStorage = Ve;
exports.useSvgFavicon = L;
exports.useThrottle = y;
exports.useViewportSize = se;
exports.useVisibilityChange = me;
exports.useWindowScroll = De;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=data:application/json;base64,