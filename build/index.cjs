'use strict';

var w = require('react');
var jsMonad = require('@tactics/js-monad');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var w__default = /*#__PURE__*/_interopDefault(w);

function V(e){w__default.default.useEffect(()=>{document.title=e;},[e]);}function S(e){w.useEffect(()=>{let t=document.querySelector('link[rel="apple-touch-icon"]');t||(t=document.createElement("link"),t.rel="apple-touch-icon",document.head.appendChild(t)),t.href=e;},[e]);}function g(e){w.useEffect(()=>{let t=document.querySelector('link[rel="icon"]:not([type="image/svg+xml"])');t||(t=document.createElement("link"),t.rel="icon",document.head.appendChild(t)),t.href=e;},[e]);}function v(e){w.useEffect(()=>{let t=document.querySelector('link[rel="icon"][type="image/svg+xml"]');t||(t=document.createElement("link"),t.type="image/svg+xml",t.rel="icon",document.head.appendChild(t)),e instanceof SVGElement?t.href="data:image/svg+xml;utf8,"+e:t.href=e;},[e]);}function U(e,r,t){w.useEffect(()=>{v(e),g(r),S(t);},[e,r,t]);}function X(){let[e,r]=w__default.default.useState(new jsMonad.Awaiting),t=w__default.default.useCallback(o=>navigator.clipboard&&navigator.clipboard.writeText(o).then(()=>{r(jsMonad.Success.of(o));}).catch(i=>{r(jsMonad.Failure.dueTo(i.message,i.name));}),[]);return [e,t]}function ee(e={}){let[r,t]=w__default.default.useState(new jsMonad.Awaiting),o=w__default.default.useRef(e);return w__default.default.useEffect(()=>{let i=({coords:u,timestamp:W})=>{t(jsMonad.Success.of({timestamp:W,latitude:u.latitude,longitude:u.longitude,altitude:u.altitude,accuracy:u.accuracy,altitudeAccuracy:u.altitudeAccuracy,heading:u.heading,speed:u.speed}));},n=u=>{t(jsMonad.Failure.dueTo(u.message,String(u.code)));},{enableHighAccuracy:s,timeout:l,maximumAge:c}=o.current;navigator.geolocation.getCurrentPosition(i,n,{enableHighAccuracy:s,timeout:l,maximumAge:c});let h=navigator.geolocation.watchPosition(i,n,{enableHighAccuracy:s,timeout:l,maximumAge:c});return ()=>{navigator.geolocation.clearWatch(h);}},[]),r}function te(e=1e3*60){let[r,t]=w__default.default.useState(!1);return w__default.default.useEffect(()=>{let o,i=()=>{t(!0);},n=oe(l=>{t(!1),window.clearTimeout(o),o=window.setTimeout(i,e);},500),s=()=>{document.hidden||n();};return o=window.setTimeout(i,e),window.addEventListener("mousemove",n),window.addEventListener("mousedown",n),window.addEventListener("resize",n),window.addEventListener("keydown",n),window.addEventListener("touchstart",n),window.addEventListener("wheel",n),document.addEventListener("visibilitychange",s),()=>{window.removeEventListener("mousemove",n),window.removeEventListener("mousedown",n),window.removeEventListener("resize",n),window.removeEventListener("keydown",n),window.removeEventListener("touchstart",n),window.removeEventListener("wheel",n),document.removeEventListener("visibilitychange",s),window.clearTimeout(o);}},[e]),r}function oe(e,r){let t;return function(...o){let i=this;t||(e.apply(i,o),t=!0,setTimeout(()=>t=!1,r));}}function a(e){let r=w__default.default.useCallback(i=>{let n=window.matchMedia(e);return n.addEventListener("change",i),()=>{n.removeEventListener("change",i);}},[e]),t=()=>window.matchMedia(e).matches,o=()=>{throw new Error("useMediaQuery is a client-only hook")};return w__default.default.useSyncExternalStore(r,t,o)}function y(){return a("(prefers-color-scheme: dark)")}function x(){return a("(prefers-contrast: more)")}function E(){return a("(prefers-contrast: less)")}function T(){return a("(prefers-reduced-motion: reduce)")}function L(){return a("(prefers-reduced-transparency: reduce)")}function ne(e,r={}){let[t,o]=w__default.default.useState(new jsMonad.Awaiting),i=w__default.default.useRef(r);return w__default.default.useEffect(()=>{let n=document.querySelector(`script[src="${e}"]`);if(n)switch(n.getAttribute("data-status")){case"ready":o(jsMonad.Success.of("ready"));break;case"error":o(jsMonad.Failure.dueTo(`Failed to load script: ${e}`,"error"));break;default:o(jsMonad.Success.of("external"));break}else if(n=document.createElement("script"),n){n.src=e,n.async=!0,document.body.appendChild(n);let s=()=>{n?.setAttribute("data-status","ready"),o(jsMonad.Success.of(!0)),c();},l=()=>{n?.setAttribute("data-status","error"),o(jsMonad.Failure.dueTo(`Failed to load script: ${e}`,"error")),c();},c=()=>{n?.removeEventListener("load",s),n?.removeEventListener("error",l);};n.addEventListener("load",s),n.addEventListener("error",l);let h=i.current.removeOnUnmount;return ()=>{h===!0&&(n?.remove(),c());}}else o(jsMonad.Failure.dueTo(`Failed to add script tag for : ${e}`,"error"));},[e]),t}function k(e,r,t,o){window.dispatchEvent(new StorageEvent("storage",{key:e,newValue:r,oldValue:t,storageArea:o}));}var z=e=>(window.addEventListener("storage",e),()=>window.removeEventListener("storage",e)),D=()=>{throw Error("this is a client-only hook")};function f(e,r){let t=r.getItem(e);if(!t)return jsMonad.Failure.dueTo(`${e} is not available in ${r} storage`,"NOT_AVAILABLE");try{let o=JSON.parse(t);return jsMonad.Success.of(o)}catch{return jsMonad.Failure.dueTo(`${e} has invalid format in storage`,"INVALID_FORMAT")}}function I(e,r,t){let o=f(e,t);try{let i=JSON.stringify(r);return t.setItem(e,i),k(e,r,o instanceof jsMonad.Failure?null:o.unwrap(),t),jsMonad.Success.of(r)}catch{return jsMonad.Failure.dueTo(`${r} has invalid format to put into storage`,"INVALID_FORMAT")}}function C(e,r){let t=f(e,r);if(t instanceof jsMonad.Failure)return r.removeItem(e),jsMonad.Success.of(e);try{return r.removeItem(e),k(e,null,t.unwrap(),r),jsMonad.Success.of(e)}catch{return jsMonad.Failure.dueTo(`${e} could not be removed from storage`,"INVALID_FORMAT")}}function ie(e,r,t){let o=()=>f(e,t),i=w__default.default.useSyncExternalStore(z,o,D),n=w__default.default.useCallback(l=>{let c=l;c===null?C(e,t):I(e,c,t);},[e,i]),s=w__default.default.useCallback(()=>{C(e,t);},[e,i]);return w__default.default.useEffect(()=>{I(e,r,t);},[e,r]),[i,n,s]}function se(){let[e,r]=w__default.default.useState({x:0,y:0}),t=w__default.default.useCallback((...o)=>{if(typeof o[0]=="object")window.scrollTo(o[0]);else if(typeof o[0]=="number"&&typeof o[1]=="number")window.scrollTo(o[0],o[1]);else throw new Error("Invalid arguments passed to scrollTo. See here for more info: https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo")},[]);return w__default.default.useLayoutEffect(()=>{let o=()=>{r({x:window.scrollX,y:window.scrollY});};return o(),window.addEventListener("scroll",o),()=>{window.removeEventListener("scroll",o);}},[]),[e,t]}function ae(){let[e,r]=w__default.default.useState({width:0,height:0});return w__default.default.useLayoutEffect(()=>{let t=()=>{r({width:window.innerWidth,height:window.innerHeight});};return t(),window.addEventListener("resize",t),()=>{window.removeEventListener("resize",t);}},[]),e}var m=class{constructor(r,t,o,i,n){this.reducedMotion=r,this.highContrast=t,this.lowContrast=o,this.reducedTransparency=i,this.darkMode=n;}prefersDarkMode(){return this.darkMode}prefersHighContrast(){return this.highContrast}prefersLowContrast(){return this.lowContrast}prefersReducedMotion(){return this.reducedMotion}prefersTransparency(){return this.reducedTransparency}};var ue=()=>{let e=T(),r=x(),t=E(),o=L(),i=y();return new m(e,r,t,o,i)};

exports.BrowserAccessibilityPreferences = m;
exports.useAppleTouchFavicon = S;
exports.useBrowserAccessibilityPreferences = ue;
exports.useCopyToClipboard = X;
exports.useDocumentTitle = V;
exports.useFavicon = U;
exports.useGeolocation = ee;
exports.useIcoFavicon = g;
exports.useIdle = te;
exports.useMediaQuery = a;
exports.usePrefersDarkMode = y;
exports.usePrefersHighContast = x;
exports.usePrefersLowContrast = E;
exports.usePrefersReducedMotion = T;
exports.usePrefersReducedTransparancy = L;
exports.useScript = ne;
exports.useStorage = ie;
exports.useSvgFavicon = v;
exports.useWindowScroll = se;
exports.useWindowSize = ae;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=data:application/json;base64,